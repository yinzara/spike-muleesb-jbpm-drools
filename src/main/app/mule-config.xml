<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:jdbc-ee="http://www.mulesoft.org/schema/mule/ee/jdbc"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:spring="http://www.springframework.org/schema/beans"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:quartz="http://www.mulesoft.org/schema/mule/quartz" xmlns:vm="http://www.mulesoft.org/schema/mule/vm"
	xmlns:jms="http://www.mulesoft.org/schema/mule/jms" xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting"
	xmlns:bpm="http://www.mulesoft.org/schema/mule/bpm" xmlns:client="http://www.mulesoft.org/schema/mule/client"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/3.2/mule.xsd
http://www.mulesoft.org/schema/mule/quartz http://www.mulesoft.org/schema/mule/quartz/3.2/mule-quartz.xsd
http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/3.2/mule-vm.xsd
http://www.mulesoft.org/schema/mule/jms http://www.mulesoft.org/schema/mule/jms/3.2/mule-jms.xsd
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/3.2/mule-scripting.xsd
http://www.mulesoft.org/schema/mule/bpm http://www.mulesoft.org/schema/mule/bpm/3.2/mule-bpm.xsd
http://www.mulesoft.org/schema/mule/client http://www.mulesoft.org/schema/mule/client/3.2/mule-client.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
http://www.springframework.org/schema/util http://www.springframework.org/schema/beans/spring-util-3.0.xsd
http://www.mulesoft.org/schema/mule/ee/jdbc http://www.mulesoft.org/schema/mule/ee/jdbc/current/mule-jdbc-ee.xsd"
	version="EE-3.5.2">
	
    <!-- scripting:script name="Script" engine="Groovy" doc:name="Script"><![CDATA[try {
		Class.forName("com.mysql.jdbc.Driver");
		System.err.println("DRIVER INITIALIZED");
	} catch (exp) {
	
	}]]></scripting:script-->
	
	<bpm:jbpm />
	<bpm:drools />
	
	<spring:beans>
		<spring:bean class="com.vocera.drools.fact.Patient" id="patient1"
			p:id="patient1"
			p:firstName="John"
			p:lastName="Doe"
			p:dateOfBirth="1982-10-22"
		/>
		
		<spring:bean class="com.vocera.drools.fact.Patient" id="patient2"
			p:id="patient2"
			p:firstName="Jim"
			p:lastName="Bean"
			p:dateOfBirth="1972-02-01"
		/>
		
		<util:map id="patientMap">
			<spring:entry key="patient1" value-ref="patient1"/>
			<spring:entry key="patient2" value-ref="patient2"/>
		</util:map>
		
		<util:list id="initial-facts">
			<spring:ref bean="patient1"/>
			<spring:ref bean="patient2"/>
		</util:list>
	</spring:beans>

	<!-- Define Warehouses facts bean -->

	<jms:activemq-connector name="jms-connector"
		brokerURL="tcp://localhost:61616" disableTemporaryReplyToDestinations="true"
		doc:name="Active MQ" />
		
	<jms:endpoint name="UnsortedOrders" queue="UnsortedOrders"
		connector-ref="jms-connector" doc:name="JMS" />
	<jms:endpoint name="WarehouseA" queue="WarehouseA"
		connector-ref="jms-connector" doc:name="JMS" />
	<jms:endpoint name="WarehouseB" queue="WarehouseB"
		connector-ref="jms-connector" doc:name="JMS" />
		
	<vm:endpoint name="DroolsEndpoint" path="drools" doc:name="VM" />
	

	<flow name="OrdersGenerator" doc:name="OrdersGenerator">
		<quartz:inbound-endpoint jobName="eventTimer"
			repeatInterval="2000" doc:name="Quartz">
			<quartz:event-generator-job>
				<quartz:payload>123</quartz:payload>
			</quartz:event-generator-job>
		</quartz:inbound-endpoint>

		<scripting:component doc:name="Script">
			<scripting:script engine="groovy">
                <![CDATA[
                import java.util.Random;
                
                def merchants = ["Target", "Wal-Mart", "Costco", "Macys"];
                Random generator = new Random();
                
                com.mulesoft.mule.droolsjbpmexample.Order order = new com.mulesoft.mule.droolsjbpmexample.Order();
                int idx = generator.nextInt(4);
                order.setMerchant(merchants[idx]);
                double weight = generator.nextDouble() * 200.0;
                order.setWeight(weight);
                return order;
                
                ]]>
			</scripting:script>
		</scripting:component>

		<jms:outbound-endpoint ref="UnsortedOrders"
			connector-ref="jms-connector" doc:name="JMS" />
	</flow>

	<flow name="jBPMProcess" doc:name="jBPMProcess">
	<jms:inbound-endpoint ref="UnsortedOrders"
				connector-ref="jms-connector" doc:name="JMS" />
		<!-- TODO streaming="false"Transform XML to object -->
		<bpm:process processName="WarehouseRouting"
			processDefinition="warehouse-routing-process.jpdl.xml" />
	</flow>

	<flow name="DroolsFlow" doc:name="DroolsFlow">
		<vm:inbound-endpoint ref="DroolsEndpoint"
			exchange-pattern="request-response" doc:name="VM" />
		<bpm:rules rulesDefinition="routingRules.drl" cepMode="true"
			initialFacts-ref="initial-facts" />
		<expression-transformer evaluator="groovy"
			expression="message.getPayload().getObject()" doc:name="Expression" />
	</flow>
</mule>
